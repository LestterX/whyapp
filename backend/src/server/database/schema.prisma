generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./src/server/database/database.sqlite"
// }

enum AccountStatus {
  ACTIVE
  INACTIVE
}

model blackListedToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    String?
  createdAt DateTime @default(now())

  @@index([token])
}

model User {
  id               String         @id @default(uuid())
  name             String         @unique
  email            String         @unique
  password         String
  account_status   AccountStatus  @default(INACTIVE)
  profile_img_path String?
  messages         Message[]
  chats            UsersInChats[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  //@@unique([name, email]) --> Indica que não pode haver registros com a mesma combinação entre eles
  @@index([name, email])
  @@map("Users")
}

model UsersInChats {
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  chat           Chat     @relation(fields: [chatId], references: [id])
  chatId         String
  assignedAt     DateTime @default(now())
  assignedByUser String

  @@id([userId, chatId])
}

model Chat {
  id                String         @id @default(uuid())
  fromToByGreaterId String?
  name              String
  messages          Message[]
  users             UsersInChats[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  message   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
